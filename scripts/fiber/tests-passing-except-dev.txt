src/renderers/__tests__/ReactComponentTreeHook-test.js
* uses displayName or Unknown for classic components
* uses displayName, name, or ReactComponent for modern components
* uses displayName, name, or Object for factory components
* uses displayName, name, or StatelessComponent for functional components
* reports a host tree correctly
* reports a simple tree with composites correctly
* reports a tree with composites correctly
* ignores null children
* ignores false children
* reports text nodes as children
* reports a single text node as a child
* reports a single number node as a child
* reports a zero as a child
* skips empty nodes for multiple children
* reports html content as no children
* updates text of a single text child
* updates from no children to a single text child
* updates from a single text child to no children
* updates from html content to a single text child
* updates from a single text child to html content
* updates from no children to multiple text children
* updates from multiple text children to no children
* updates from html content to multiple text children
* updates from multiple text children to html content
* updates from html content to no children
* updates from no children to html content
* updates from one text child to multiple text children
* updates from multiple text children to one text child
* updates text nodes when reordering
* updates host nodes when reordering with keys
* updates host nodes when reordering without keys
* updates a single composite child of a different type
* updates a single composite child of the same type
* updates from no children to a single composite child
* updates from a single composite child to no children
* updates mixed children
* updates with a host child
* updates from null to a host child
* updates from a host child to null
* updates from a host child to a composite child
* updates from a composite child to a host child
* updates from null to a composite child
* updates from a composite child to null
* updates with a host child
* updates from null to a host child
* updates from a host child to null
* updates from a host child to a composite child
* updates from a composite child to a host child
* updates from null to a composite child
* updates from a composite child to null
* tracks owner correctly
* purges unmounted components automatically
* reports update counts
* does not report top-level wrapper as a root
* registers inlined text nodes
* works

src/renderers/__tests__/ReactComponentTreeHook-test.native.js
* uses displayName or Unknown for classic components
* uses displayName, name, or ReactComponent for modern components
* uses displayName, name, or Object for factory components
* uses displayName, name, or StatelessComponent for functional components
* reports a host tree correctly
* reports a simple tree with composites correctly
* reports a tree with composites correctly
* ignores null children
* ignores false children
* reports text nodes as children
* reports a single text node as a child
* reports a single number node as a child
* reports a zero as a child
* skips empty nodes for multiple children
* updates text of a single text child
* updates from no children to a single text child
* updates from a single text child to no children
* updates from no children to multiple text children
* updates from multiple text children to no children
* updates from one text child to multiple text children
* updates from multiple text children to one text child
* updates text nodes when reordering
* updates host nodes when reordering with keys
* updates host nodes when reordering with keys
* updates a single composite child of a different type
* updates a single composite child of the same type
* updates from no children to a single composite child
* updates from a single composite child to no children
* updates mixed children
* updates with a host child
* updates from null to a host child
* updates from a host child to null
* updates from a host child to a composite child
* updates from a composite child to a host child
* updates from null to a composite child
* updates from a composite child to null
* updates with a host child
* updates from null to a host child
* updates from a host child to null
* updates from a host child to a composite child
* updates from a composite child to a host child
* updates from null to a composite child
* updates from a composite child to null
* tracks owner correctly
* purges unmounted components automatically
* reports update counts
* does not report top-level wrapper as a root

src/renderers/__tests__/ReactHostOperationHistoryHook-test.js
* gets recorded for host roots
* gets recorded for composite roots
* gets recorded when a native is mounted deeply instead of null
* gets recorded during mount
* gets recorded during an update
* gets ignored if the styles are shallowly equal
* gets recorded during mount
* gets recorded during mount
* gets recorded during mount
* gets recorded during an update from text content
* gets recorded during an update from html
* gets recorded during an update from children
* gets recorded when composite renders to a different type
* gets recorded when composite renders to null after a native
* gets recorded during an update from text content
* gets recorded during an update from html
* gets recorded during an update from children
* gets reported when a child is inserted
* gets reported when a child is inserted
* gets reported when a child is removed

src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js
* should not warn when server-side rendering `onScroll`
* should warn about incorrect casing on properties (ssr)
* should warn about incorrect casing on event handlers (ssr)
* should warn about class (ssr)
* should suggest property name if available (ssr)

src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js
* renders a blank div with client render on top of bad server markup
* renders a div with inline styles with client render on top of bad server markup
* renders a self-closing tag with client render on top of bad server markup
* renders a self-closing tag as a child with client render on top of bad server markup
* renders simple numbers with client render on top of bad server markup
* renders simple strings with client render on top of bad server markup
* renders string prop with true value with client render on top of bad server markup
* renders string prop with false value with client render on top of bad server markup
* renders string prop with true value with client render on top of bad server markup
* renders boolean prop with true value with client render on top of bad server markup
* renders boolean prop with false value with client render on top of bad server markup
* renders boolean prop with missing value with client render on top of bad server markup
* renders boolean prop with self value with client render on top of bad server markup
* renders boolean prop with "" value with client render on top of bad server markup
* renders boolean prop with string value with client render on top of bad server markup
* renders boolean prop with array value with client render on top of bad server markup
* renders boolean prop with object value with client render on top of bad server markup
* renders boolean prop with non-zero number value with client render on top of bad server markup
* renders boolean prop with zero value with client render on top of bad server markup
* renders download prop with true value with client render on top of bad server markup
* renders download prop with false value with client render on top of bad server markup
* renders download prop with no value with client render on top of bad server markup
* renders download prop with string value with client render on top of bad server markup
* renders download prop with string "true" value with client render on top of bad server markup
* renders className prop with string value with client render on top of bad server markup
* renders className prop with empty string value with client render on top of bad server markup
* renders className prop with true value with client render on top of bad server markup
* renders className prop with false value with client render on top of bad server markup
* renders className prop with false value with client render on top of bad server markup
* renders htmlFor with string value with client render on top of bad server markup
* renders htmlFor with an empty string with client render on top of bad server markup
* renders className prop with true value with client render on top of bad server markup
* renders className prop with false value with client render on top of bad server markup
* renders className prop with false value with client render on top of bad server markup
* renders no ref attribute with client render on top of bad server markup
* renders no children attribute with client render on top of bad server markup
* renders no key attribute with client render on top of bad server markup
* renders no dangerouslySetInnerHTML attribute with client render on top of bad server markup
* renders no unknown attributes with server string render
* renders no unknown attributes with client render on top of bad server markup
* renders unknown data- attributes with client render on top of bad server markup
* renders no unknown attributes for non-standard elements with server string render
* renders no unknown attributes for non-standard elements with client render on top of bad server markup
* renders unknown attributes for custom elements with client render on top of bad server markup
* renders unknown attributes for custom elements using is with client render on top of bad server markup
* renders no HTML events with client render on top of bad server markup
* renders a div with text with client render on top of bad server markup
* renders a div with text with flanking whitespace with client render on top of bad server markup
* renders a div with text with client render on top of bad server markup
* renders a div with blank text child with client render on top of bad server markup
* renders a non-standard element with text with client render on top of bad server markup
* renders a custom element with text with client render on top of bad server markup
* renders an element with just one text child without comments with client render on top of bad server markup
* renders a number as single child with client render on top of bad server markup
* renders zero as single child with client render on top of bad server markup
* renders null single child as blank with client render on top of bad server markup
* renders false single child as blank with client render on top of bad server markup
* renders undefined single child as blank with client render on top of bad server markup
* renders only null and false children as blank with client render on top of bad server markup
* renders an svg element with client render on top of bad server markup
* renders svg element with an xlink with client render on top of bad server markup
* renders a math element with client render on top of bad server markup
* renders an img with client render on top of bad server markup
* renders a button with client render on top of bad server markup
* renders a div with dangerouslySetInnerHTML with client render on top of bad server markup
* renders a newline-eating tag with content not starting with \n with client render on top of bad server markup
* renders a newline-eating tag with content starting with \n with client render on top of bad server markup
* renders a normal tag with content starting with \n with client render on top of bad server markup
* renders stateless components with client render on top of bad server markup
* renders React.createClass components with client render on top of bad server markup
* renders ES6 class components with client render on top of bad server markup
* renders factory components with client render on top of bad server markup
* renders single child hierarchies of components with client render on top of bad server markup
* renders multi-child hierarchies of components with client render on top of bad server markup
* renders a div with a child with client render on top of bad server markup
* renders a div with multiple children with client render on top of bad server markup
* renders >,<, and & as single child with client render on top of bad server markup
* throws when rendering a string component with clean client render
* throws when rendering a string component with client render on top of bad server markup
* throws when rendering an undefined component with clean client render
* throws when rendering an undefined component with client render on top of bad server markup
* throws when rendering a number component with clean client render
* throws when rendering a number component with client render on top of bad server markup
* renders an input with a value and an onChange with client render on top of bad server markup
* renders an input with a value and readOnly with client render on top of bad server markup
* renders can render an input with a value and no onChange/readOnly with client render on top of bad server markup
* renders can render an input with a defaultValue with client render on top of bad server markup
* renders can render an input with both a value and defaultValue part 1 with client render on top of bad server markup
* renders can render an input with both a value and defaultValue part 2 with client render on top of bad server markup
* renders a checkbox that is checked with an onChange with client render on top of bad server markup
* renders a checkbox that is checked with readOnly with client render on top of bad server markup
* renders can render a checkbox that is checked and no onChange/readOnly with client render on top of bad server markup
* renders can render a checkbox with defaultChecked with client render on top of bad server markup
* renders can render a checkbox with both a checked and defaultChecked part 1 with client render on top of bad server markup
* renders can render a checkbox with both a checked and defaultChecked part 2 with client render on top of bad server markup
* renders a textarea with a value and an onChange with client render on top of bad server markup
* renders a textarea with a value and readOnly with client render on top of bad server markup
* renders can render a textarea with a value and no onChange/readOnly with client render on top of bad server markup
* renders can render a textarea with a defaultValue with client render on top of bad server markup
* renders can render a textarea with both a value and defaultValue part 1 with client render on top of bad server markup
* renders can render a textarea with both a value and defaultValue part 2 with client render on top of bad server markup
* renders a select with a value and an onChange with client render on top of bad server markup
* renders a select with a value and readOnly with client render on top of bad server markup
* renders a select with a multiple values and an onChange with client render on top of bad server markup
* renders a select with a multiple values and readOnly with client render on top of bad server markup
* renders can render a select with a value and no onChange/readOnly with client render on top of bad server markup
* renders can render a select with a defaultValue with client render on top of bad server markup
* renders can render a select with both a value and defaultValue part 1 with client render on top of bad server markup
* renders can render a select with both a value and defaultValue part 2 with client render on top of bad server markup
* renders should render a controlled text input with client render on top of bad server markup
* renders should render a controlled textarea with client render on top of bad server markup
* renders should render a controlled checkbox with client render on top of bad server markup
* renders should render a controlled select with client render on top of bad server markup
* renders should call getInitialState for createClass components with client render on top of bad server markup
* renders can render context with client render on top of bad server markup
* renders can pass context through to a grandchild with client render on top of bad server markup
* renders should let a child context override a parent context with client render on top of bad server markup
* renders should merge a child context with a parent context with client render on top of bad server markup
* renders should run componentWillMount before getChildContext with client render on top of bad server markup
* should error reconnecting different element types
* should error reconnecting missing attributes
* should error reconnecting added attributes
* should error reconnecting different attribute values
* should error reconnecting different text
* should error reconnecting different numbers
* should error reconnecting different number from text
* should error reconnecting different text in code block
* should error reconnecting different text in two code blocks
* should error reconnecting a div with text in code block and literal
* should error reconnecting a div with text in code block and literal 2
* should error reconnecting missing children
* should error reconnecting added children
* should error reconnecting more children
* should error reconnecting fewer children
* should error reconnecting reordered children
* should error reconnecting a div with children separated by whitespace on the client
* should error reconnecting a div with children separated by different whitespace on the server
* should error reconnecting a div with children separated by different whitespace
* can distinguish an empty component from a dom node
* can distinguish an empty component from an empty text component
* should error reconnecting a div with different dangerouslySetInnerHTML

src/renderers/dom/shared/__tests__/ReactMount-test.js
* should warn if mounting into dirty rendered markup
* should account for escaping on a checksum mismatch

src/renderers/dom/shared/__tests__/ReactMountDestruction-test.js
* should warn when unmounting a non-container root node
* should warn when unmounting a non-container, non-root node

src/renderers/dom/shared/__tests__/ReactServerRendering-test.js
* should have the correct mounting behavior
